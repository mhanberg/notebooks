# Multimap

## Code

```elixir
Mix.install([:benchee, :kino])
```

```elixir
defmodule MultiMap do
  def run(lists, mappers) do
    multi_map(Enum.zip(lists, mappers))
  end

  def run2(lists, mappers) do
    Enum.flat_map(Enum.zip(lists, mappers), fn {list, mapper} ->
      Enum.map(list, mapper)
    end)
  end

  def run3(lists, mappers) do
    for {list, mapper} <- Enum.zip(lists, mappers),
        item <- list,
        do: mapper.(item)
  end

  def multi_map([{list, mapper} | rest]) do
    multi_map(list, mapper, rest)
  end

  def multi_map([], _mapper, []) do
    []
  end

  def multi_map([], _mapper, [{list, mapper} | remaining_lists]) do
    multi_map(list, mapper, remaining_lists)
  end

  def multi_map([item | rest], mapper, remaining_lists) do
    [mapper.(item) | multi_map(rest, mapper, remaining_lists)]
  end
end
```

```elixir
list_count = Kino.Input.number("List Count", default: 5)
```

```elixir
list_size = Kino.Input.number("List Size", default: 10000)
```

```elixir
size = Kino.Input.read(list_size)
count = Kino.Input.read(list_count)
count = Enum.random(1..count)

lists =
  for _ <- 1..count do
    List.duplicate("Hello World", Enum.random(1..size))
  end

mapper = fn x -> x <> "!" end
mappers = Stream.cycle([mapper])
```

```elixir
one = MultiMap.run(lists, mappers)
two = MultiMap.run2(lists, mappers)
three = MultiMap.run3(lists, mappers)

for m <- [one, two, three], n <- [one, two, three] do
  unless m == n do
    raise "#{inspect(m)} does not equal #{inspect(n)}"
  end
end

"Success"
```

```elixir
Benchee.run(%{
  "multimap" => fn ->
    MultiMap.run(lists, mappers)
  end,
  "flat_map" => fn ->
    MultiMap.run2(lists, mappers)
  end,
  "for" => fn ->
    MultiMap.run3(lists, mappers)
  end
})
```
